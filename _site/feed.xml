<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://10.0.0.146:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://10.0.0.146:4000/" rel="alternate" type="text/html" /><updated>2016-08-07T21:32:32-07:00</updated><id>http://10.0.0.146:4000/</id><title>Linuxdynasty</title><subtitle>All the stuff I do on a day to day basis</subtitle><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><entry><title>How to use Ansible AWS filters to make your playbooks and roles dynamic.</title><link href="http://10.0.0.146:4000/ansible-filters-and-how-they-can-make-your-playbooks-dynamic/" rel="alternate" type="text/html" title="How to use Ansible AWS filters to make your playbooks and roles dynamic." /><published>2016-05-02T00:00:00-07:00</published><updated>2016-05-02T00:00:00-07:00</updated><id>http://10.0.0.146:4000/ansible-filters-and-how-they-can-make-your-playbooks-dynamic</id><content type="html" xml:base="http://10.0.0.146:4000/ansible-filters-and-how-they-can-make-your-playbooks-dynamic/">&lt;p&gt;Before I get into how I leverage Filter plugins, 1st let me post a resource about what Filters are in Ansible and how you can leverage them. &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_filters.html&quot;&gt;Common Filter in Ansible&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After reading this post about Filters, you may want to start building your own. The resource below will point you to the Ansibile documentation for developing plugins. &lt;a href=&quot;http://docs.ansible.com/ansible/developing_plugins.html&quot;&gt;Developing Plugins in Ansible&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;hard-coding-arns-and-ids-life-without-filters-&quot;&gt;Hard coding ARNs and IDs. Life without filters. :(&lt;/h1&gt;

&lt;p&gt;If I were not to go the route of using filters and I wanted to deploy a new VPC and all of it’s resources (subnets, routes, igws, nat gateways, peers), I would have to take the following steps with Ansible.&lt;/p&gt;

&lt;h3 id=&quot;steps-to-deploy-a-vpc-hard-coding&quot;&gt;Steps to Deploy a VPC (hard coding).&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run vpc_deploy.yml playbook. (Wait for playbook to finish running.)&lt;/li&gt;
  &lt;li&gt;Hard code IDs and ARNs in either your host_vars, group_vars, or vars folder in the role you used to deploy the VPC.&lt;/li&gt;
  &lt;li&gt;Commit the changes and push to github or what ever VCS you use.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;third&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/wtf_hardcoding.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/wtf_hardcoding.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;WTF am I reading?&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now you still have to deploy the AWS resources your services depend on (RDS, Security Groups, ELB, ASG, Kinesis, SQS, etc…).&lt;/p&gt;

&lt;h3 id=&quot;steps-to-deploy-aws-services-hard-coding&quot;&gt;Steps to Deploy AWS Services (hard coding).&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Run aws_services.yml playbook (Wait for playbook to finish running.)&lt;/li&gt;
  &lt;li&gt;Hard code IDs and ARNs in either your host_vars, group_vars, or vars folder in the role you used to deploy the AWS services.&lt;/li&gt;
  &lt;li&gt;Commit the changes and push to github or what ever VCS you use.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;second&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/wtf_hardcoding2.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/wtf_hardcoding2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;More hard coding &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now if I had to do that for every VPC we manage, I would lose my mind. Also what if I want to deploy a new VPC to test out a new feature. This is not only time consuming but a real pain in the ass. Would you not rather come up with a name scheme for your AWS infrastructure and based on that name scheme, you will no longer have to worry about hard coding IDs or ARNs any more?&lt;/p&gt;

&lt;h1 id=&quot;filters-and-the-end-of-hard-coding-arns-and-ids&quot;&gt;Filters and the end of hard coding ARN’s and IDs.&lt;/h1&gt;
&lt;p&gt;I see Ansible Filters as easy to write Python functions. Anything you can write in a function can be used as a filter. If you have been writing scripts in Python for a while, you will find that writing Ansible plugins is such a breeze.&lt;/p&gt;

&lt;p&gt;Due to the awesomeness of filters, I know longer have to hard code any ARN or ID in any of my playbooks. Instead I have a filter that grabs the ARN for me based on the name of the resource. Now you may ask, so what is the big deal with hard coding? Well, I personally do not want to use another tool to deploy a new VPC.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;In order for these AWS filters to work, you will need to use the Name tag for all of your services.&lt;/p&gt;

&lt;h3 id=&quot;example-of-using-filters-in-a-role-rolesservicesvarswebappyml&quot;&gt;Example of using filters in a role “&lt;strong&gt;roles/services/vars/webapp.yml&lt;/strong&gt;”&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mysql_server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_region&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;get_rds_endpoint(rds_instance_name)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;memcached_server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_region&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;get_elasticache_endpoint(memcached_instance_name)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;redshift_server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;aws_region&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;get_redshift_endpoint(redshift_name)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-benefits-of-using-the-filters-above&quot;&gt;The benefits of using the filters above.&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You do not need to know the rds instance address, sqs url, or AWS Certificate ARN in advance.&lt;/li&gt;
  &lt;li&gt;You do not need to hard code it for each vpc or environment or app. Name space everything appropriately, and you will always get the right ARN, ID, Address, URL, etc..&lt;/li&gt;
  &lt;li&gt;AWS Filters should be used in the task or role and not in group_vars/, host_vars, or vars.  (&lt;strong&gt;If the resource does not exist, when you call the filter. The filter will raise an exception&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-look-into-the-getrdsendpoint-filter&quot;&gt;A look into the get_rds_endpoint filter.&lt;/h1&gt;

&lt;h1 class=&quot;notice--info&quot; id=&quot;i-am-not-using-the-correct-plugin-type-i-should-be-using-lookup-plugins-instead-of-the-filters-plugin-my-decision-to-use-the-filter-plugin-instead-of-the-lookup-plugin-is-purely-a-choice-based-on-taste-i-do-not-want-to-have-a-python-file-for-each-lookup-that-i-require-i-rather-write-a-module-for-each-type-of-filtering-that-i-need-to-do-for-instance-my-aws-calls-are-in-the-filterpluginsawspy&quot;&gt;I am not using the correct plugin type. I should be using lookup plugins instead of the filters plugin. My decision to use the filter plugin instead of the lookup plugin, is purely a choice based on taste. I do not want to have a Python file for each lookup that I require. I rather write a module for each type of filtering that I need to do. For instance, my aws calls are in the filter_plugins/aws.py.&lt;/h1&gt;

&lt;script src=&quot;http://gist-it.appspot.com/http://github.com/linuxdynasty/ld-ansible-filters/blob/master/filter_plugins/aws.py?slice=371:401&quot;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;em&gt;get_rds_endpoint&lt;/em&gt; function is 15 lines of code and 13 lines of documentation. Such a small script and yet it has saved me from hard coding.&lt;/p&gt;

&lt;h1 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Do not hard code ARNs or IDs.&lt;/li&gt;
  &lt;li&gt;Spend less time commiting to your VCS.&lt;/li&gt;
  &lt;li&gt;Use AWS filters in your roles or in tasks.&lt;/li&gt;
  &lt;li&gt;Do not use AWS filters in group_vars, host_vars, or vars.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><category term="Ansible" /><category term="Ansible Filters" /><category term="AWS" /><category term="Automation" /><summary>Before I get into how I leverage Filter plugins, 1st let me post a resource about what Filters are in Ansible and how you can leverage them. Common Filter in Ansible</summary></entry><entry><title>Graph resque metrics using sensu and graphite.</title><link href="http://10.0.0.146:4000/graph-resque-metrics-using-sensu-and-graphite/" rel="alternate" type="text/html" title="Graph resque metrics using sensu and graphite." /><published>2014-10-10T00:00:00-07:00</published><updated>2014-10-10T00:00:00-07:00</updated><id>http://10.0.0.146:4000/graph-resque-metrics-using-sensu-and-graphite</id><content type="html" xml:base="http://10.0.0.146:4000/graph-resque-metrics-using-sensu-and-graphite/">&lt;p&gt;We are using Resque for our background jobs and we use the Resque Web interface
to keep track of what is happening. But the only issue, is that we had no
real insight to how many jobs we were running on average during certain times
of the day. We didn’t know how many jobs we were processing per minute. Nor how 
many workers we had per host all day everyday, which varies depending on the time
of the day.&lt;/p&gt;

&lt;h3 id=&quot;download-script&quot;&gt;Download Script&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/linuxdynasty/Linuxdynasty/blob/master/scripts/sensu/metrics/resque_queue_metrics.rb&quot;&gt;Resque Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sensuapp.org/&quot;&gt;Sensu&lt;/a&gt; (shipper)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphite.wikidot.com/&quot;&gt;Graphite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/resque/resque&quot;&gt;Resque&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/opt/sensu/embedded/bin/ruby /etc/sensu/plugins/resque_queue_metrics.rb  -h localhost -n 15 --scheme redis-db01.resque
redis-db01.resque.queue.update_unapplied.workers 1, 1412961997
redis-db01.resque.queue.update_unapplied.jobs 0 1412961997
redis-db01.resque.queue.aging.workers 1, 1412961997
redis-db01.resque.queue.aging.jobs 0 1412961997
redis-db01.resque.host.worker-host-01.processed 90537 1412961997
redis-db01.resque.host.worker-host-01.queues 38 1412961997
redis-db01.resque.host.worker-host-01.workers 47 1412961997
redis-db01.resque.host.worker-host-02.processed 20482 1412961997
redis-db01.resque.host.worker-host-02.queues 29 1412961997
redis-db01.resque.host.worker-host-02.workers 20 1412961997
redis-db01.resque.host.worker-host-05.processed 20560 1412961997
redis-db01.resque.host.worker-host-05.queues 1 1412961997
redis-db01.resque.host.worker-host-05.workers 9 1412961997
redis-db01.resque.host.worker-host-03.processed 10928 1412961997
redis-db01.resque.host.worker-host-03.queues 1 1412961997
redis-db01.resque.host.worker-host-03.workers 15 1412961997
redis-db01.resque.host.worker-host-04.processed 23554 1412961997
redis-db01.resque.host.worker-host-04.queues 1 1412961997
redis-db01.resque.host.worker-host-04.workers 9 1412961997
redis-db01.resque.failed.communication.Communication.ActiveRecord_RecordNotFound 3 1412961997
redis-db01.resque.failed.communication.Communication.Redis_TimeoutError 1 1412961997
redis-db01.resque.failed.create_batch.CreateBatch.BatchCreationValidator_Error 77 1412961997
redis-db01.resque.failed.create_batch.CreateBatch.RuntimeError 5 1412961997
redis-db01.resque.failed.notification.Notification.ActiveRecord_RecordInvalid 2 1412961997
redis-db01.resque.failed.notification.Notification.Resque_DirtyExit 4 1412961997
redis-db01.resque.failed.notification.Notification.Redis_TimeoutError 3 1412961997
redis-db01.resque.failed.message_notifications.MessageTaskJob.RuntimeError 2 1412961997
redis-db01.resque.failed.note_upload.NoteUploadJob.HttpClient_AuthorizationError 40 1412961997
redis-db01.resque.failed.invitation.InvitationJob.ActiveRecord_RecordInvalid 2 1412961997
redis-db01.resque.failed.post.PostJob.Redis_TimeoutError 6 1412961997
redis-db01.resque.failed.post.PostJob.Resque_DirtyExit 48 1412961997
redis-db01.resque.failed.encounter.EncounterJob.Exception_NoTransitionAllowed 1 1412961997
redis-db01.resque.failed.claim_assembly.ClaimAssembly.Redis_TimeoutError 2 1412961997
redis-db01.resque.failed.claim_assembly.ClaimAssembly.Resque_DirtyExit 3 1412961997
redis-db01.resque.failed.claim_assembly.ClaimAssembly.Exception 1 1412961997
redis-db01.resque.failed.balance.Balancer_BalancerJob.Resque_DirtyExit 28 1412961997
redis-db01.resque.failed.balance.Balancer_BalanceJob.Redis_TimeoutError 1 1412961997
redis-db01.resque.failed.balance.Balancer_BalanceJob.Resque_DirtyExit 2 1412961997
redis-db01.resque.queue.failed.jobs   231 1412961997
redis-db01.resque.queues  35  1412961997
redis-db01.resque.workers 100 1412961997
redis-db01.resque.working 2   1412961997&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h3&gt;

&lt;p&gt;Now you can create dashboards, with enough information, that the developers
will no longer need to ask you what is happening with resque.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/failed_resque_jobs.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/failed_resque_jobs.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Resque failed jobs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/resque_jobs_1.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/resque_jobs_1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Resque jobs.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/resque_workers.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/resque_workers.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Resque workers.&lt;/figcaption&gt;
&lt;/figure&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><category term="metrics" /><category term="sensu" /><category term="graphite" /><category term="ruby" /><category term="resque" /><category term="redis" /><summary>We are using Resque for our background jobs and we use the Resque Web interface
to keep track of what is happening. But the only issue, is that we had no
real insight to how many jobs we were running on average during certain times
of the day. We didn’t know how many jobs we were processing per minute. Nor how 
many workers we had per host all day everyday, which varies depending on the time
of the day.</summary></entry><entry><title>Graph passenger metrics using sensu and graphite.</title><link href="http://10.0.0.146:4000/graph-passenger-metrics-using-sensu-and-graphite/" rel="alternate" type="text/html" title="Graph passenger metrics using sensu and graphite." /><published>2014-10-10T00:00:00-07:00</published><updated>2014-10-10T00:00:00-07:00</updated><id>http://10.0.0.146:4000/graph-passenger-metrics-using-sensu-and-graphite</id><content type="html" xml:base="http://10.0.0.146:4000/graph-passenger-metrics-using-sensu-and-graphite/">&lt;p&gt;Before I started working here, they were only collecting the common metrics
for passenger (queue, processes, and max processes). After being here a little
over a month, I realized that we were always logging into the nodes
and running watch passenger-status, and watching how much memory
certain passenger workers were consuming and how much time each of these
processes were taking.&lt;/p&gt;

&lt;p&gt;I kept telling my team, there had to be a better way of gathering this information.
After a quick glance at passenge-status –help, I hit the gold mine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Usage: passenger-status &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Phusion Passenger&lt;span class=&quot;s1&quot;&gt;&#39;s PID]

Tool for inspecting Phusion Passenger&#39;&lt;/span&gt;s internal status.

Options:
        --show&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pool|requests|backtraces|xml|union_station
                                     Whether to show the pool&lt;span class=&quot;s1&quot;&gt;&#39;s contents,
                                     the currently running requests,
                                     the backtraces of all threads or an XML
                                     description of the pool.
    -v, --verbose                    Show verbose information.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;download-script&quot;&gt;Download Script&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/linuxdynasty/Linuxdynasty/blob/master/scripts/sensu/metrics/passenger_metrics.rb&quot;&gt;Passenger Metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sensuapp.org/&quot;&gt;Sensu&lt;/a&gt; (shipper)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphite.wikidot.com/&quot;&gt;Graphite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;NokoGiri&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;testing-passenger-status---show-xml&quot;&gt;Testing passenger-status –show xml&lt;/h3&gt;

&lt;p&gt;If you installed libxml2-utils, the xml will look very nice..
Lets take a quick glance, on what the show xml command will display….&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;passenger-status --show xml
&amp;lt;?xml &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iso8859-1&quot;&lt;/span&gt;?&amp;gt;
&amp;lt;info &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&amp;gt;
   &amp;lt;process_count&amp;gt;1&amp;lt;/process_count&amp;gt;
   &amp;lt;max&amp;gt;20&amp;lt;/max&amp;gt;
   &amp;lt;capacity_used&amp;gt;1&amp;lt;/capacity_used&amp;gt;
   &amp;lt;get_wait_list_size&amp;gt;0&amp;lt;/get_wait_list_size&amp;gt;
   &amp;lt;get_wait_list/&amp;gt;
   &amp;lt;supergroups&amp;gt;
      &amp;lt;supergroup&amp;gt;
         &amp;lt;name&amp;gt;/home/deploy/test_app/current&amp;lt;/name&amp;gt;
         &amp;lt;state&amp;gt;READY&amp;lt;/state&amp;gt;
         &amp;lt;get_wait_list_size&amp;gt;0&amp;lt;/get_wait_list_size&amp;gt;
         &amp;lt;capacity_used&amp;gt;1&amp;lt;/capacity_used&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another example of the xml data, but showing you the process data instead…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;passenger-status --show xml
          &amp;lt;processes&amp;gt;
               &amp;lt;process&amp;gt;
                  &amp;lt;pid&amp;gt;8540&amp;lt;/pid&amp;gt;
                  &amp;lt;sticky_session_id&amp;gt;1653709171&amp;lt;/sticky_session_id&amp;gt;
                  &amp;lt;gupid&amp;gt;167557a-WVPmDSUsnlj&amp;lt;/gupid&amp;gt;
                  &amp;lt;connect_password&amp;gt;l;sdkflskdjfslkfjsaj;flkdjs&amp;lt;/connect_password&amp;gt;
                  &amp;lt;concurrency&amp;gt;1&amp;lt;/concurrency&amp;gt;
                  &amp;lt;sessions&amp;gt;0&amp;lt;/sessions&amp;gt;
                  &amp;lt;busyness&amp;gt;0&amp;lt;/busyness&amp;gt;
                  &amp;lt;processed&amp;gt;102&amp;lt;/processed&amp;gt;
                  &amp;lt;spawner_creation_time&amp;gt;1412922319025804&amp;lt;/spawner_creation_time&amp;gt;
                  &amp;lt;spawn_start_time&amp;gt;1412958391718240&amp;lt;/spawn_start_time&amp;gt;
                  &amp;lt;spawn_end_time&amp;gt;1412958391746191&amp;lt;/spawn_end_time&amp;gt;
                  &amp;lt;last_used&amp;gt;1412958455204460&amp;lt;/last_used&amp;gt;
                  &amp;lt;uptime&amp;gt;1m 5s&amp;lt;/uptime&amp;gt;
                  &amp;lt;life_status&amp;gt;ALIVE&amp;lt;/life_status&amp;gt;
                  &amp;lt;enabled&amp;gt;ENABLED&amp;lt;/enabled&amp;gt;
                  &amp;lt;has_metrics&amp;gt;true&amp;lt;/has_metrics&amp;gt;
                  &amp;lt;cpu&amp;gt;4&amp;lt;/cpu&amp;gt;
                  &amp;lt;rss&amp;gt;171028&amp;lt;/rss&amp;gt;
                  &amp;lt;pss&amp;gt;136789&amp;lt;/pss&amp;gt;
                  &amp;lt;private_dirty&amp;gt;103424&amp;lt;/private_dirty&amp;gt;
                  &amp;lt;swap&amp;gt;0&amp;lt;/swap&amp;gt;
                  &amp;lt;real_memory&amp;gt;103424&amp;lt;/real_memory&amp;gt;
                  &amp;lt;vmsize&amp;gt;642504&amp;lt;/vmsize&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;running-the-script&quot;&gt;Running the script&lt;/h3&gt;

&lt;p&gt;As you can see, you can get a wealth of data. Data that will allow you and your
team to easily track down what is happening in you rails/sinatra cluster.&lt;/p&gt;

&lt;p&gt;This script was written to work with Sensu and it’s graphite handler.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/opt/sensu/embedded/bin/ruby /etc/sensu/plugins/passenger_metrics.rb --scheme rails-01.passenger
rails-01.passenger.max_pool_size  50  1412958773
rails-01.passenger.processes  23  1412958773
rails-01.passenger.top_level_queue    0   1412958773
rails-01.passenger._var_www_html_test_api_current.queue    0   1412958773
rails-01.passenger._var_www_html_test_api_current.processes    23  1412958773
rails-01.passenger._var_www_html_test_api_current.processes_being_spawned  0   1412958773
rails-01.passenger._var_www_html_test_api_current.process_1.processed  3567    1412958773
rails-01.passenger._var_www_html_test_api_current.process_1.pid    7703    1412958773
rails-01.passenger._var_www_html_test_api_current.process_1.uptime 921 1412958773
rails-01.passenger._var_www_html_test_api_current.process_1.memory 909664  1412958773
rails-01.passenger._var_www_html_test_api_current.process_1.cpu_percent    27  1412958773
rails-01.passenger._var_www_html_test_api_current.process_2.processed  2194    1412958773
rails-01.passenger._var_www_html_test_api_current.process_2.pid    11878   1412958773
rails-01.passenger._var_www_html_test_api_current.process_2.uptime 659 1412958773
rails-01.passenger._var_www_html_test_api_current.process_2.memory 644108  1412958773
rails-01.passenger._var_www_html_test_api_current.process_2.cpu_percent    23  1412958773
rails-01.passenger._var_www_html_test_api_current.process_3.processed  1484    1412958773
rails-01.passenger._var_www_html_test_api_current.process_3.pid    16146   1412958773
rails-01.passenger._var_www_html_test_api_current.process_3.uptime 402 1412958773
rails-01.passenger._var_www_html_test_api_current.process_3.memory 691392  1412958773
rails-01.passenger._var_www_html_test_api_current.process_3.cpu_percent    32  1412958773
rails-01.passenger._var_www_html_test_api_current.process_4.processed  1343    1412958773
rails-01.passenger._var_www_html_test_api_current.process_4.pid    16738   1412958773
rails-01.passenger._var_www_html_test_api_current.process_4.uptime 353 1412958773
rails-01.passenger._var_www_html_test_api_current.process_4.memory 521676  1412958773
rails-01.passenger._var_www_html_test_api_current.process_4.cpu_percent    32  1412958773&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###Screenshots&lt;/p&gt;

&lt;p&gt;Now you can create dashboards, with enough information, that the developers
will no longer need to ask you what is happening with passenger.&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/passenger_workers.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/passenger_workers.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Passenger Workers.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/passenger_queues.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/passenger_queues.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Passenger Queues.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/passenger_memory_used.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/passenger_memory_used.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Passenger Workers Memory Used.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/passenger_time_spent.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/passenger_time_spent.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Passenger Workers Time Spent.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure class=&quot;&quot;&gt;
    &lt;a href=&quot;http://10.0.0.146:4000/assets/nginx_passenger.png&quot;&gt;&lt;img src=&quot;http://10.0.0.146:4000/assets/nginx_passenger.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;Nginx and Passenger Stats.&lt;/figcaption&gt;
&lt;/figure&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><summary>Before I started working here, they were only collecting the common metrics
for passenger (queue, processes, and max processes). After being here a little
over a month, I realized that we were always logging into the nodes
and running watch passenger-status, and watching how much memory
certain passenger workers were consuming and how much time each of these
processes were taking.</summary></entry><entry><title>Migrated from wordpress to github.io pages</title><link href="http://10.0.0.146:4000/migrated-from-wordpress-to-github-dot-io-pages/" rel="alternate" type="text/html" title="Migrated from wordpress to github.io pages" /><published>2014-09-23T00:00:00-07:00</published><updated>2014-09-23T00:00:00-07:00</updated><id>http://10.0.0.146:4000/migrated-from-wordpress-to-github-dot-io-pages</id><content type="html" xml:base="http://10.0.0.146:4000/migrated-from-wordpress-to-github-dot-io-pages/">&lt;p&gt;I just finished migrating from wordpress, and I love having the simplicity of 
just managing static pages and being able to edit them right from vim.
I will be updating my old posts little by little, so if a download link is not valid
than just check my &lt;a href=&quot;https://github.com/linuxdynasty/Linuxdynasty&quot;&gt;GitHub Page&lt;/a&gt;&lt;/p&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><summary>I just finished migrating from wordpress, and I love having the simplicity of 
just managing static pages and being able to edit them right from vim.
I will be updating my old posts little by little, so if a download link is not valid
than just check my GitHub Page</summary></entry><entry><title>HowTo check redis availability and get stats using Redis-py, Zenoss, and Python</title><link href="http://10.0.0.146:4000/python/zenoss/redis/howto-check-redis-availability-stats-redis-py-zenoss-python/" rel="alternate" type="text/html" title="HowTo check redis availability and get stats using Redis-py, Zenoss, and Python" /><published>2012-03-20T00:00:00-07:00</published><updated>2012-03-20T00:00:00-07:00</updated><id>http://10.0.0.146:4000/python/zenoss/redis/howto-check-redis-availability-stats-redis-py-zenoss-python</id><content type="html" xml:base="http://10.0.0.146:4000/python/zenoss/redis/howto-check-redis-availability-stats-redis-py-zenoss-python/">&lt;p&gt;My team was assigned to create a redis slave status check to be ran under Zenoss.
So while they are creating that check, I decided to google for redis checks
written in python that work under Nagios and or Zenoss and none of the checks
i found did exactly what I wanted.&lt;/p&gt;

&lt;p&gt;So I decided to write my own check, that will grab every piece of data that the redis info() command was able to retrieve. Since this info is all in a python dictionary, I was able to get all the stats that were labeled as type int or as type float, which made my job that much easier.&lt;/p&gt;

&lt;p&gt;So 1st I had to install 2 Redis instances on my local Ubuntu server at home. Now that i completed that, I had to make sure the slave was syncing off the master server. I used this link “&lt;a title=&quot;Redis Replication Configuration&quot; href=&quot;http://redis.io/topics/replication&quot; target=&quot;_blank&quot;&gt;http://redis.io/topics/replication&lt;/a&gt;” to help me configure redis replication.
Now that all that stuff is out of the way, I wrote an easy_peasy python script to connect to redis and grab all of the performance stats. As well as verify if the instance is a master or a slave instance. If it is a slave instance, than it also verifies if it is syncing to the master or not.
The script is using &lt;a href=&quot;https://github.com/andymccurdy/redis-py&quot; target=&quot;_blank&quot;&gt;Redis-py&lt;/a&gt; that was installed using PIP.&lt;/p&gt;

&lt;p&gt;Here is the script I wrote&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python ld_check_redis.py -d 127.0.0.1 -p &lt;span class=&quot;s1&quot;&gt;&#39;t35t_r3d15&#39;&lt;/span&gt; -n 6379
OK Master Redis Server 127.0.0.1 is Running 2.4.4 | &lt;span class=&quot;nv&quot;&gt;pubsub_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;bgrewriteaof_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;connected_slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;uptime_in_days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;lru_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1099413 &lt;span class=&quot;nv&quot;&gt;last_save_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1332199497 &lt;span class=&quot;nv&quot;&gt;redis_git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;connected_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;keyspace_misses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 &lt;span class=&quot;nv&quot;&gt;used_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;939792 &lt;span class=&quot;nv&quot;&gt;vm_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;used_cpu_user_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000 &lt;span class=&quot;nv&quot;&gt;used_memory_peak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;939776 &lt;span class=&quot;nv&quot;&gt;total_commands_processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;span class=&quot;nv&quot;&gt;latest_fork_usec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;211 &lt;span class=&quot;nv&quot;&gt;used_memory_rss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1286144 &lt;span class=&quot;nv&quot;&gt;total_connections_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8 &lt;span class=&quot;nv&quot;&gt;pubsub_patterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;aof_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.130000 &lt;span class=&quot;nv&quot;&gt;used_cpu_sys_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000 &lt;span class=&quot;nv&quot;&gt;blocked_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;used_cpu_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.120000 &lt;span class=&quot;nv&quot;&gt;client_biggest_input_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;db0_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;db0_expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;arch_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64
&lt;span class=&quot;nv&quot;&gt;mem_fragmentation_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.370000 &lt;span class=&quot;nv&quot;&gt;expired_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;evicted_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;bgsave_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;client_longest_output_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;process_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;22007 &lt;span class=&quot;nv&quot;&gt;uptime_in_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;401 &lt;span class=&quot;nv&quot;&gt;changes_since_last_save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2
&lt;span class=&quot;nv&quot;&gt;redis_git_dirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;keyspace_hits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

python ld_check_redis.py -d 127.0.0.1 -p &lt;span class=&quot;s1&quot;&gt;&#39;t35t_r3d15&#39;&lt;/span&gt; -n 6390
OK Master 127.0.0.1 is up and Slave 127.0.0.1 is &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;sync | &lt;span class=&quot;nv&quot;&gt;pubsub_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;bgrewriteaof_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;connected_slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;uptime_in_days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;lru_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1099413 &lt;span class=&quot;nv&quot;&gt;last_save_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1332199497 &lt;span class=&quot;nv&quot;&gt;redis_git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;connected_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;keyspace_misses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4 &lt;span class=&quot;nv&quot;&gt;used_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;939872 &lt;span class=&quot;nv&quot;&gt;master_last_io_seconds_ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8
&lt;span class=&quot;nv&quot;&gt;vm_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_user_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000 &lt;span class=&quot;nv&quot;&gt;used_memory_peak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;931248 &lt;span class=&quot;nv&quot;&gt;total_commands_processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;44
&lt;span class=&quot;nv&quot;&gt;latest_fork_usec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_memory_rss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1277952 &lt;span class=&quot;nv&quot;&gt;total_connections_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;pubsub_patterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;aof_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;used_cpu_sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.130000 &lt;span class=&quot;nv&quot;&gt;used_cpu_sys_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000 &lt;span class=&quot;nv&quot;&gt;blocked_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.070000
&lt;span class=&quot;nv&quot;&gt;master_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6379 &lt;span class=&quot;nv&quot;&gt;client_biggest_input_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;db0_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;db0_expires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;arch_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64
&lt;span class=&quot;nv&quot;&gt;mem_fragmentation_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.360000 &lt;span class=&quot;nv&quot;&gt;expired_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;evicted_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;bgsave_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;client_longest_output_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;master_sync_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;process_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;22010 &lt;span class=&quot;nv&quot;&gt;uptime_in_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;398 &lt;span class=&quot;nv&quot;&gt;changes_since_last_save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;redis_git_dirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;keyspace_hits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0

CRITICAL Master 127.0.0.1 is down and Slave 127.0.0.1 is out of sync |
&lt;span class=&quot;nv&quot;&gt;pubsub_channels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;bgrewriteaof_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;connected_slaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;master_link_down_since_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1332199283
&lt;span class=&quot;nv&quot;&gt;uptime_in_days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;lru_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1099352 &lt;span class=&quot;nv&quot;&gt;last_save_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1332198992 &lt;span class=&quot;nv&quot;&gt;redis_git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;connected_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;keyspace_misses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;931040 &lt;span class=&quot;nv&quot;&gt;master_last_io_seconds_ago&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-1 &lt;span class=&quot;nv&quot;&gt;vm_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_user_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000
&lt;span class=&quot;nv&quot;&gt;used_memory_peak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;931040 &lt;span class=&quot;nv&quot;&gt;total_commands_processed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 &lt;span class=&quot;nv&quot;&gt;latest_fork_usec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_memory_rss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1261568
&lt;span class=&quot;nv&quot;&gt;total_connections_received&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6 &lt;span class=&quot;nv&quot;&gt;pubsub_patterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;aof_enabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.080000
&lt;span class=&quot;nv&quot;&gt;used_cpu_sys_children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.000000 &lt;span class=&quot;nv&quot;&gt;blocked_clients&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;used_cpu_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.030000 &lt;span class=&quot;nv&quot;&gt;master_port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6379
&lt;span class=&quot;nv&quot;&gt;client_biggest_input_buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;arch_bits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nv&quot;&gt;mem_fragmentation_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.360000 &lt;span class=&quot;nv&quot;&gt;expired_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;evicted_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
 &lt;span class=&quot;nv&quot;&gt;bgsave_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;client_longest_output_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;master_sync_in_progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;process_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;21887
&lt;span class=&quot;nv&quot;&gt;uptime_in_seconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;290 &lt;span class=&quot;nv&quot;&gt;changes_since_last_save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;redis_git_dirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;keyspace_hits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><category term="Python" /><category term="Zenoss" /><category term="Redis" /><summary>My team was assigned to create a redis slave status check to be ran under Zenoss.
So while they are creating that check, I decided to google for redis checks
written in python that work under Nagios and or Zenoss and none of the checks
i found did exactly what I wanted.</summary></entry><entry><title>How To monitor RTSP streaming videos using openRTSP and Zenoss</title><link href="http://10.0.0.146:4000/python/zenoss/monitor-rtsp-streaming-videos-openrtsp-zenoss/" rel="alternate" type="text/html" title="How To monitor RTSP streaming videos using openRTSP and Zenoss" /><published>2011-12-30T00:00:00-08:00</published><updated>2011-12-30T00:00:00-08:00</updated><id>http://10.0.0.146:4000/python/zenoss/monitor-rtsp-streaming-videos-openrtsp-zenoss</id><content type="html" xml:base="http://10.0.0.146:4000/python/zenoss/monitor-rtsp-streaming-videos-openrtsp-zenoss/">&lt;p&gt;Since I do currently work for a streaming company, that would imply that we should have some type of monitoring for our RTSP streams ;-). You will 1st need to get the openRTSP command.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You will need to download the openRTSP command from http://www.live555.com/openRTSP/&lt;/li&gt;
&lt;li&gt;Or if you are running Zenoss on top of Debian you can just run a apt-get install livemedia-utils&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you do that, all you have to do next is to download my script and have a valid server to point at and a path to test... Example below.. {filelink=24}&lt;/p&gt;
&lt;pre&gt;./check_rtsp.py -d remote_server -p /iphone/2012 
OK /iphone/2012, test completed successfull against remote_server |status=0&lt;/pre&gt;
&lt;p&gt;or with stats...&lt;/p&gt;
&lt;pre&gt;./check_rtsp.py -d remote_server -p /iphone/2012 -s
OK /iphone/2012, test completed successfull against remote_server |status=0 num_packets_received=16 num_packets_lost=0 elapsed_measurement_time=3.000073 kBytes_received_total=16.309000 
measurement_sampling_interval_ms=1000 kbits_per_second_min=29.245485 kbits_per_second_ave=43.489608 
kbits_per_second_max=51.737449 packet_loss_percentage_min=0.000000 packet_loss_percentage_ave=0.000000 
packet_loss_percentage_max=0.000000 inter_packet_gap_ms_min=0.018000 inter_packet_gap_ms_ave=161.139313 
inter_packet_gap_ms_max=901.439000 subsession=video/H264 num_packets_received=61 num_packets_lost=0 
elapsed_measurement_time=3.000073 kBytes_received_total=27.630000 measurement_sampling_interval_ms=1000 
kbits_per_second_min=0.000000 kbits_per_second_ave=73.678207 kbits_per_second_max=122.923442 
packet_loss_percentage_min=0.000000 packet_loss_percentage_ave=0.000000 packet_loss_percentage_max=0.000000 
inter_packet_gap_ms_min=0.009000 inter_packet_gap_ms_ave=24.794672 inter_packet_gap_ms_max=528.923000&lt;/pre&gt;
&lt;p&gt;So you can trend the different stats that openRTSP provides in Zenoss..&lt;/p&gt;</content><author><name>Allen Sanabria</name><email>asanabria &lt;@&gt; linuxdynasty dot org</email></author><category term="Zenoss" /><category term="openRTSP" /><summary>Since I do currently work for a streaming company, that would imply that we should have some type of monitoring for our RTSP streams ;-). You will 1st need to get the openRTSP command.

You will need to download the openRTSP command from http://www.live555.com/openRTSP/
Or if you are running Zenoss on top of Debian you can just run a apt-get install livemedia-utils

Once you do that, all you have to do next is to download my script and have a valid server to point at and a path to test... Example below.. {filelink=24}
./check_rtsp.py -d remote_server -p /iphone/2012 
OK /iphone/2012, test completed successfull against remote_server |status=0
or with stats...
./check_rtsp.py -d remote_server -p /iphone/2012 -s
OK /iphone/2012, test completed successfull against remote_server |status=0 num_packets_received=16 num_packets_lost=0 elapsed_measurement_time=3.000073 kBytes_received_total=16.309000 
measurement_sampling_interval_ms=1000 kbits_per_second_min=29.245485 kbits_per_second_ave=43.489608 
kbits_per_second_max=51.737449 packet_loss_percentage_min=0.000000 packet_loss_percentage_ave=0.000000 
packet_loss_percentage_max=0.000000 inter_packet_gap_ms_min=0.018000 inter_packet_gap_ms_ave=161.139313 
inter_packet_gap_ms_max=901.439000 subsession=video/H264 num_packets_received=61 num_packets_lost=0 
elapsed_measurement_time=3.000073 kBytes_received_total=27.630000 measurement_sampling_interval_ms=1000 
kbits_per_second_min=0.000000 kbits_per_second_ave=73.678207 kbits_per_second_max=122.923442 
packet_loss_percentage_min=0.000000 packet_loss_percentage_ave=0.000000 packet_loss_percentage_max=0.000000 
inter_packet_gap_ms_min=0.009000 inter_packet_gap_ms_ave=24.794672 inter_packet_gap_ms_max=528.923000
So you can trend the different stats that openRTSP provides in Zenoss..</summary></entry></feed>
